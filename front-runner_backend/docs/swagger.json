{
    "swagger": "2.0",
    "info": {
        "description": "API documentation for the Front Runner application.",
        "title": "Front Runner API",
        "contact": {
            "name": "API Support",
            "email": "jonathan.bravo@ufl.edu"
        },
        "license": {
            "name": "MIT",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/api/add_product": {
            "post": {
                "description": "Creates a new product with details including name, description, price, count, tags, and an associated image.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Add a new product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product name",
                        "name": "productName",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product description",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Product price",
                        "name": "price",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Product stock count",
                        "name": "count",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product tags",
                        "name": "tags",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Product image file",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product added successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error parsing form or uploading image",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/add_storefront": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Links a new external storefront (e.g., Amazon, Pinterest) to the user's account, storing credentials securely. Requires authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "storefronts"
                ],
                "summary": "Link a new storefront",
                "parameters": [
                    {
                        "description": "Storefront Link Details (including credentials like apiKey, apiSecret)",
                        "name": "storefrontLink",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storefronttable.StorefrontLinkAddPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully linked storefront (credentials omitted)",
                        "schema": {
                            "$ref": "#/definitions/storefronttable.StorefrontLinkReturn"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input, missing fields, or JSON parsing error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User session invalid or expired",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict - A link with this name/type already exists for the user",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - E.g., failed to encrypt, database error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/create_order": {
            "post": {
                "description": "Creates a new order entry with details including customer name, products, count, and order date.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Creates an order",
                "parameters": [
                    {
                        "description": "Order Details",
                        "name": "orderInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/orderstable.OrderCreatePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product added successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error parsing form or uploading image",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/delete_product": {
            "delete": {
                "description": "Deletes an existing product and its associated image if the product belongs to the authenticated user.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Delete a product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/delete_storefront": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes the link to an external storefront specified by its unique ID. User must own the link. Requires authentication.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "storefronts"
                ],
                "summary": "Unlink a storefront",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "uint",
                        "example": 123,
                        "description": "ID of the Storefront Link to delete",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Storefront unlinked successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "204": {
                        "description": "Storefront unlinked successfully (No Content)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid or missing 'id' query parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User session invalid or expired",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not own this storefront link",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - Storefront link with the specified ID not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Database deletion failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/get_order": {
            "get": {
                "description": "Retreives an existing order and its associated metadata if the order belongs to the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Retrieve an order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JSON representation of an orders information (empty object if none)",
                        "schema": {
                            "$ref": "#/definitions/orderstable.OrderReturn"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "No Order with specified ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/get_orders": {
            "get": {
                "description": "Retreives orders and their associated metadata belonging to the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "Retrieve an user's orders",
                "responses": {
                    "200": {
                        "description": "JSON representation of an orders information (empty object if none)",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/orderstable.OrderReturn"
                            }
                        }
                    },
                    "401": {
                        "description": "User not authenticated or unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "No Order with specified ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/get_product": {
            "get": {
                "description": "Retreives an existing product and its associated metadata if the product belongs to the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Retrieve a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JSON representation of a product's information",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "No Product with specified ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/get_product_image": {
            "get": {
                "description": "Retreives an existing product image if it exists and belongs to the authenticated user.",
                "produces": [
                    "image/*"
                ],
                "tags": [
                    "product",
                    "images"
                ],
                "summary": "Retrieve a product image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filepath of image",
                        "name": "image",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image's data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Requested image does not exist",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/get_products": {
            "get": {
                "description": "Retreives existing products and their associated metadata for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Retrieves all product information for authenticated user.",
                "responses": {
                    "200": {
                        "description": "JSON representation of a user's product information",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/get_storefronts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of all external storefronts linked by the currently authenticated user. Credentials are *never* included. Requires authentication.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "storefronts"
                ],
                "summary": "Get linked storefronts",
                "responses": {
                    "200": {
                        "description": "List of linked storefronts (empty array if none)",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/storefronttable.StorefrontLinkReturn"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User session invalid or expired",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Database query failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "description": "Authenticates a user and creates a session.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logged in successfully.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Email and password are required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "description": "Logs out the current user by clearing the session.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/register": {
            "post": {
                "description": "Registers a new user using email, password, and an optional business name.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Business name",
                        "name": "business_name",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Email and password are required or invalid email format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Email already in use or database error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/update_product": {
            "put": {
                "description": "Updates the details of an existing product (description, price, stock count) that belongs to the authenticated user.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Update a product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New product description",
                        "name": "product_description",
                        "in": "formData"
                    },
                    {
                        "type": "number",
                        "description": "New product price",
                        "name": "item_price",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "New product stock count",
                        "name": "stock_amount",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/update_storefront": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the name, store ID, or store URL of an existing storefront link belonging to the authenticated user. Store type and credentials cannot be updated via this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "storefronts"
                ],
                "summary": "Update a storefront link",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "uint",
                        "example": 123,
                        "description": "ID of the Storefront Link to update",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Fields to update (storeName, storeId, storeUrl)",
                        "name": "storefrontUpdate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storefronttable.StorefrontLinkUpdatePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated storefront link details",
                        "schema": {
                            "$ref": "#/definitions/storefronttable.StorefrontLinkReturn"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input, missing ID, or JSON parsing error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User session invalid or expired",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not own this storefront link",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - Storefront link with the specified ID not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict - Update would violate a unique constraint (e.g., duplicate name)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Database update failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "orderstable.OrderCreatePayload": {
            "type": "object",
            "properties": {
                "customerEmail": {
                    "description": "Email of the customer that placed the order",
                    "type": "string"
                },
                "customerName": {
                    "description": "Name of the customer that placed the order",
                    "type": "string"
                },
                "orderedProducts": {
                    "description": "List of ordered products",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/orderstable.OrderProductPayload"
                    }
                }
            }
        },
        "orderstable.OrderProductPayload": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "productID": {
                    "type": "integer"
                }
            }
        },
        "orderstable.OrderProductReturn": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "price": {
                    "type": "number"
                },
                "productID": {
                    "type": "integer"
                },
                "productName": {
                    "type": "string"
                }
            }
        },
        "orderstable.OrderReturn": {
            "type": "object",
            "properties": {
                "customerEmail": {
                    "description": "Name of the customer that placed the order",
                    "type": "string"
                },
                "customerName": {
                    "description": "Name of the customer that placed the order",
                    "type": "string"
                },
                "orderDate": {
                    "type": "string"
                },
                "orderID": {
                    "description": "ID of the order requested",
                    "type": "integer"
                },
                "orderedProducts": {
                    "description": "List of ordered products",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/orderstable.OrderProductReturn"
                    }
                },
                "status": {
                    "type": "string"
                },
                "total": {
                    "type": "number"
                },
                "trackingNumber": {
                    "type": "string"
                }
            }
        },
        "storefronttable.StorefrontLinkAddPayload": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "description": "Example credential field",
                    "type": "string"
                },
                "apiSecret": {
                    "description": "Example credential field",
                    "type": "string"
                },
                "storeId": {
                    "description": "Platform-specific ID",
                    "type": "string"
                },
                "storeName": {
                    "description": "User-defined nickname",
                    "type": "string"
                },
                "storeType": {
                    "type": "string"
                },
                "storeUrl": {
                    "description": "Storefront URL",
                    "type": "string"
                }
            }
        },
        "storefronttable.StorefrontLinkReturn": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "storeId": {
                    "description": "Match frontend JSON keys",
                    "type": "string"
                },
                "storeName": {
                    "type": "string"
                },
                "storeType": {
                    "type": "string"
                },
                "storeUrl": {
                    "type": "string"
                }
            }
        },
        "storefronttable.StorefrontLinkUpdatePayload": {
            "type": "object",
            "properties": {
                "storeId": {
                    "description": "Platform-specific ID",
                    "type": "string"
                },
                "storeName": {
                    "description": "User-defined nickname",
                    "type": "string"
                },
                "storeUrl": {
                    "description": "Storefront URL",
                    "type": "string"
                }
            }
        }
    }
}