basePath: /
definitions:
  orderstable.OrderCreatePayload:
    properties:
      customerEmail:
        description: Email of the customer that placed the order
        type: string
      customerName:
        description: Name of the customer that placed the order
        type: string
      orderedProducts:
        description: List of ordered products
        items:
          $ref: '#/definitions/orderstable.OrderProductPayload'
        type: array
    type: object
  orderstable.OrderProductPayload:
    properties:
      count:
        type: integer
      productID:
        type: integer
    type: object
  orderstable.OrderProductReturn:
    properties:
      count:
        type: integer
      price:
        type: number
      productID:
        type: integer
      productName:
        type: string
    type: object
  orderstable.OrderReturn:
    properties:
      customerEmail:
        description: Name of the customer that placed the order
        type: string
      customerName:
        description: Name of the customer that placed the order
        type: string
      orderDate:
        type: string
      orderID:
        description: ID of the order requested
        type: integer
      orderedProducts:
        description: List of ordered products
        items:
          $ref: '#/definitions/orderstable.OrderProductReturn'
        type: array
      status:
        type: string
      total:
        type: number
      trackingNumber:
        type: string
    type: object
  storefronttable.StorefrontLinkAddPayload:
    properties:
      apiKey:
        description: Example credential field
        type: string
      apiSecret:
        description: Example credential field
        type: string
      storeId:
        description: Platform-specific ID
        type: string
      storeName:
        description: User-defined nickname
        type: string
      storeType:
        type: string
      storeUrl:
        description: Storefront URL
        type: string
    type: object
  storefronttable.StorefrontLinkReturn:
    properties:
      id:
        type: integer
      storeId:
        description: Match frontend JSON keys
        type: string
      storeName:
        type: string
      storeType:
        type: string
      storeUrl:
        type: string
    type: object
  storefronttable.StorefrontLinkUpdatePayload:
    properties:
      storeId:
        description: Platform-specific ID
        type: string
      storeName:
        description: User-defined nickname
        type: string
      storeUrl:
        description: Storefront URL
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: jonathan.bravo@ufl.edu
    name: API Support
  description: API documentation for the Front Runner application.
  license:
    name: MIT
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Front Runner API
  version: "1.0"
paths:
  /api/add_product:
    post:
      consumes:
      - multipart/form-data
      description: Creates a new product with details including name, description,
        price, count, tags, and an associated image.
      parameters:
      - description: Product name
        in: formData
        name: productName
        required: true
        type: string
      - description: Product description
        in: formData
        name: description
        required: true
        type: string
      - description: Product price
        in: formData
        name: price
        required: true
        type: number
      - description: Product stock count
        in: formData
        name: count
        required: true
        type: integer
      - description: Product tags
        in: formData
        name: tags
        type: string
      - description: Product image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - text/plain
      responses:
        "201":
          description: Product added successfully
          schema:
            type: string
        "400":
          description: Error parsing form or uploading image
          schema:
            type: string
        "401":
          description: User not authenticated
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Add a new product
      tags:
      - product
  /api/add_storefront:
    post:
      consumes:
      - application/json
      description: Links a new external storefront (e.g., Amazon, Pinterest) to the
        user's account, storing credentials securely. Requires authentication.
      parameters:
      - description: Storefront Link Details (including credentials like apiKey, apiSecret)
        in: body
        name: storefrontLink
        required: true
        schema:
          $ref: '#/definitions/storefronttable.StorefrontLinkAddPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully linked storefront (credentials omitted)
          schema:
            $ref: '#/definitions/storefronttable.StorefrontLinkReturn'
        "400":
          description: Bad Request - Invalid input, missing fields, or JSON parsing
            error
          schema:
            type: string
        "401":
          description: Unauthorized - User session invalid or expired
          schema:
            type: string
        "409":
          description: Conflict - A link with this name/type already exists for the
            user
          schema:
            type: string
        "500":
          description: Internal Server Error - E.g., failed to encrypt, database error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Link a new storefront
      tags:
      - storefronts
  /api/create_order:
    post:
      consumes:
      - application/json
      description: Creates a new order entry with details including customer name,
        products, count, and order date.
      parameters:
      - description: Order Details
        in: body
        name: orderInfo
        required: true
        schema:
          $ref: '#/definitions/orderstable.OrderCreatePayload'
      produces:
      - text/plain
      responses:
        "201":
          description: Product added successfully
          schema:
            type: string
        "400":
          description: Error parsing form or uploading image
          schema:
            type: string
        "401":
          description: User not authenticated
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Creates an order
      tags:
      - order
  /api/delete_product:
    delete:
      description: Deletes an existing product and its associated image if the product
        belongs to the authenticated user.
      parameters:
      - description: Product ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Product deleted successfully
          schema:
            type: string
        "401":
          description: User not authenticated or unauthorized
          schema:
            type: string
        "404":
          description: Product not found
          schema:
            type: string
      summary: Delete a product
      tags:
      - product
  /api/delete_storefront:
    delete:
      description: Removes the link to an external storefront specified by its unique
        ID. User must own the link. Requires authentication.
      parameters:
      - description: ID of the Storefront Link to delete
        example: 123
        format: uint
        in: query
        name: id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: Storefront unlinked successfully
          schema:
            type: string
        "204":
          description: Storefront unlinked successfully (No Content)
          schema:
            type: string
        "400":
          description: Bad Request - Invalid or missing 'id' query parameter
          schema:
            type: string
        "401":
          description: Unauthorized - User session invalid or expired
          schema:
            type: string
        "403":
          description: Forbidden - User does not own this storefront link
          schema:
            type: string
        "404":
          description: Not Found - Storefront link with the specified ID not found
          schema:
            type: string
        "500":
          description: Internal Server Error - Database deletion failed
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Unlink a storefront
      tags:
      - storefronts
  /api/get_order:
    get:
      description: Retreives an existing order and its associated metadata if the
        order belongs to the authenticated user.
      parameters:
      - description: Order ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: JSON representation of an orders information (empty object
            if none)
          schema:
            $ref: '#/definitions/orderstable.OrderReturn'
        "401":
          description: User not authenticated or unauthorized
          schema:
            type: string
        "403":
          description: Permission denied
          schema:
            type: string
        "404":
          description: No Order with specified ID
          schema:
            type: string
      summary: Retrieve an order
      tags:
      - order
  /api/get_orders:
    get:
      description: Retreives orders and their associated metadata belonging to the
        authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: JSON representation of an orders information (empty object
            if none)
          schema:
            items:
              $ref: '#/definitions/orderstable.OrderReturn'
            type: array
        "401":
          description: User not authenticated or unauthorized
          schema:
            type: string
        "403":
          description: Permission denied
          schema:
            type: string
        "404":
          description: No Order with specified ID
          schema:
            type: string
      summary: Retrieve an user's orders
      tags:
      - order
  /api/get_product:
    get:
      description: Retreives an existing product and its associated metadata if the
        product belongs to the authenticated user.
      parameters:
      - description: Product ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: JSON representation of a product's information
          schema:
            type: string
        "401":
          description: User not authenticated or unauthorized
          schema:
            type: string
        "403":
          description: Permission denied
          schema:
            type: string
        "404":
          description: No Product with specified ID
          schema:
            type: string
      summary: Retrieve a product
      tags:
      - product
  /api/get_product_image:
    get:
      description: Retreives an existing product image if it exists and belongs to
        the authenticated user.
      parameters:
      - description: Filepath of image
        in: query
        name: image
        required: true
        type: string
      produces:
      - image/*
      responses:
        "200":
          description: Image's data
          schema:
            type: string
        "401":
          description: User not authenticated or unauthorized
          schema:
            type: string
        "403":
          description: Permission denied
          schema:
            type: string
        "404":
          description: Requested image does not exist
          schema:
            type: string
      summary: Retrieve a product image
      tags:
      - product
      - images
  /api/get_products:
    get:
      description: Retreives existing products and their associated metadata for the
        authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: JSON representation of a user's product information
          schema:
            type: string
        "401":
          description: User not authenticated or unauthorized
          schema:
            type: string
      summary: Retrieves all product information for authenticated user.
      tags:
      - product
  /api/get_storefronts:
    get:
      description: Retrieves a list of all external storefronts linked by the currently
        authenticated user. Credentials are *never* included. Requires authentication.
      produces:
      - application/json
      responses:
        "200":
          description: List of linked storefronts (empty array if none)
          schema:
            items:
              $ref: '#/definitions/storefronttable.StorefrontLinkReturn'
            type: array
        "401":
          description: Unauthorized - User session invalid or expired
          schema:
            type: string
        "500":
          description: Internal Server Error - Database query failed
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get linked storefronts
      tags:
      - storefronts
  /api/login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Authenticates a user and creates a session.
      parameters:
      - description: User email
        in: formData
        name: email
        required: true
        type: string
      - description: User password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Logged in successfully.
          schema:
            type: string
        "400":
          description: Email and password are required
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
      summary: User login
      tags:
      - authentication
  /api/logout:
    post:
      description: Logs out the current user by clearing the session.
      produces:
      - text/plain
      responses:
        "200":
          description: Logged out successfully
          schema:
            type: string
      summary: User logout
      tags:
      - authentication
  /api/register:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Registers a new user using email, password, and an optional business
        name.
      parameters:
      - description: User email
        in: formData
        name: email
        required: true
        type: string
      - description: User password
        in: formData
        name: password
        required: true
        type: string
      - description: Business name
        in: formData
        name: business_name
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: User registered successfully
          schema:
            type: string
        "400":
          description: Email and password are required or invalid email format
          schema:
            type: string
        "409":
          description: Email already in use or database error
          schema:
            type: string
      summary: Register a new user
      tags:
      - authentication
  /api/update_product:
    put:
      consumes:
      - application/x-www-form-urlencoded
      description: Updates the details of an existing product (description, price,
        stock count) that belongs to the authenticated user.
      parameters:
      - description: Product ID
        in: query
        name: id
        required: true
        type: string
      - description: New product description
        in: formData
        name: product_description
        type: string
      - description: New product price
        in: formData
        name: item_price
        type: number
      - description: New product stock count
        in: formData
        name: stock_amount
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: Product updated successfully
          schema:
            type: string
        "401":
          description: User not authenticated or unauthorized
          schema:
            type: string
        "404":
          description: Product not found
          schema:
            type: string
      summary: Update a product
      tags:
      - product
  /api/update_storefront:
    put:
      consumes:
      - application/json
      description: Updates the name, store ID, or store URL of an existing storefront
        link belonging to the authenticated user. Store type and credentials cannot
        be updated via this endpoint.
      parameters:
      - description: ID of the Storefront Link to update
        example: 123
        format: uint
        in: query
        name: id
        required: true
        type: integer
      - description: Fields to update (storeName, storeId, storeUrl)
        in: body
        name: storefrontUpdate
        required: true
        schema:
          $ref: '#/definitions/storefronttable.StorefrontLinkUpdatePayload'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated storefront link details
          schema:
            $ref: '#/definitions/storefronttable.StorefrontLinkReturn'
        "400":
          description: Bad Request - Invalid input, missing ID, or JSON parsing error
          schema:
            type: string
        "401":
          description: Unauthorized - User session invalid or expired
          schema:
            type: string
        "403":
          description: Forbidden - User does not own this storefront link
          schema:
            type: string
        "404":
          description: Not Found - Storefront link with the specified ID not found
          schema:
            type: string
        "409":
          description: Conflict - Update would violate a unique constraint (e.g.,
            duplicate name)
          schema:
            type: string
        "500":
          description: Internal Server Error - Database update failed
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update a storefront link
      tags:
      - storefronts
swagger: "2.0"
