basePath: /
definitions:
  prodtable.ProductReturn:
    properties:
      image:
        description: Consider renaming to imageURL or similar
        type: string
      prodCount:
        type: integer
      prodDesc:
        type: string
      prodID:
        type: integer
      prodName:
        type: string
      prodPrice:
        type: number
      prodTags:
  orderstable.OrderCreatePayload:
    properties:
      customerEmail:
        description: Email of the customer that placed the order
        type: string
      customerName:
        description: Name of the customer that placed the order
        type: string
      orderedProducts:
        description: List of ordered products
        items:
          $ref: '#/definitions/orderstable.OrderProductPayload'
        type: array
    type: object
  orderstable.OrderProductPayload:
    properties:
      count:
        type: integer
      productID:
        type: integer
    type: object
  orderstable.OrderProductReturn:
    properties:
      count:
        type: integer
      price:
        type: number
      productID:
        type: integer
      productName:
        type: string
    type: object
  orderstable.OrderReturn:
    properties:
      customerEmail:
        description: Name of the customer that placed the order
        type: string
      customerName:
        description: Name of the customer that placed the order
        type: string
      orderDate:
        type: string
      orderID:
        description: ID of the order requested
        type: integer
      orderedProducts:
        description: List of ordered products
        items:
          $ref: '#/definitions/orderstable.OrderProductReturn'
        type: array
      status:
        type: string
      total:
        type: number
      trackingNumber:
        type: string
    type: object
  storefronttable.StorefrontLinkAddPayload:
    properties:
      apiKey:
        description: Example credential field
        type: string
      apiSecret:
        description: Example credential field
        type: string
      storeId:
        description: Platform-specific ID
        type: string
      storeName:
        description: User-defined nickname
        type: string
      storeType:
        type: string
      storeUrl:
        description: Storefront URL
        type: string
    type: object
  storefronttable.StorefrontLinkReturn:
    properties:
      id:
        type: integer
      storeId:
        description: Match frontend JSON keys
        type: string
      storeName:
        type: string
      storeType:
        type: string
      storeUrl:
        type: string
    type: object
  storefronttable.StorefrontLinkUpdatePayload:
    properties:
      storeId:
        description: Platform-specific ID
        type: string
      storeName:
        description: User-defined nickname
        type: string
      storeUrl:
        description: Storefront URL
        type: string
    type: object
host: localhost:8080 // Update this if using ngrok static domain for Swagger docs
info:
  contact:
    email: jonathan.bravo@ufl.edu
    name: API Support
  description: API documentation for the Front Runner application.
  license:
    name: MIT
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Front Runner API
  version: "1.0"
paths:
  /api/add_storefront:
    post:
      consumes:
      - application/json
      description: Links a new external storefront (e.g., Amazon, Pinterest) to the
        user's account, storing credentials securely. Requires authentication.
      parameters:
      - description: Storefront Link Details (including credentials like apiKey, apiSecret)
        in: body
        name: storefrontLink
        required: true
        schema:
          $ref: '#/definitions/storefronttable.StorefrontLinkAddPayload'
      responses:
        "201":
          description: Successfully linked storefront (credentials omitted)
          schema:
            $ref: '#/definitions/storefronttable.StorefrontLinkReturn'
        "400":
          description: Bad Request - Invalid input, missing fields, or JSON parsing
            error
          schema:
            type: string
        "401":
          description: Unauthorized - User session invalid or expired
          schema:
            type: string
        "409":
          description: Conflict - A link with this name/type already exists for the
            user
          schema:
            type: string
        "500":
          description: Internal Server Error - E.g., failed to encrypt, database error
          schema:
            type: string
      security:
      - ApiKeyAuth // Assuming ApiKeyAuth is defined for session/token auth: []
      summary: Link a new storefront
      tags:
      - Storefronts
  /api/create_order:
    post:
      consumes:
      - application/json
      description: Creates a new order entry with details including customer name,
        products, count, and order date.
      parameters:
      - description: Order Details
        in: body
        name: orderInfo
        required: true
        schema:
          $ref: '#/definitions/orderstable.OrderCreatePayload'
      produces:
      - text/plain
      responses:
        "201":
          description: Product added successfully
          schema:
            type: string
        "400":
          description: Error parsing form or uploading image
          schema:
            type: string
        "401":
          description: User not authenticated
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Creates an order
      tags:
      - order
  /api/delete_product:
    delete:
      description: Deletes an existing product and its associated image if the product
        belongs to the authenticated user.
      parameters:
      - description: Product ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Product deleted successfully
          schema:
            type: string
        "401":
          description: User not authenticated or unauthorized
          schema:
            type: string
        "404":
          description: Product not found
          schema:
            type: string
      summary: Delete a product
      tags:
      - product
  /api/delete_storefront:
    delete:
      description: Removes the link to an external storefront specified by its unique
        ID. User must own the link. Requires authentication.
      parameters:
      - description: ID of the Storefront Link to delete
        example: 123
        format: uint
        in: query
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Storefront unlinked successfully
          schema:
            type: string
        "204":
          description: Storefront unlinked successfully (No Content)" // Added 204
            as an alternative success
          schema:
            type: string
        "400":
          description: Bad Request - Invalid or missing 'id' query parameter
          schema:
            type: string
        "401":
          description: Unauthorized - User session invalid or expired
          schema:
            type: string
        "403":
          description: Forbidden - User does not own this storefront link
          schema:
            type: string
        "404":
          description: Not Found - Storefront link with the specified ID not found
          schema:
            type: string
        "500":
          description: Internal Server Error - Database deletion failed
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Unlink a storefront
      tags:
      - Storefronts
  /api/get_storefronts:
  /api/get_order:
    get:
      description: Retreives an existing order and its associated metadata if the
        order belongs to the authenticated user.
      parameters:
      - description: Order ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: JSON representation of an orders information (empty object
            if none)
          schema:
            $ref: '#/definitions/orderstable.OrderReturn'
        "401":
          description: User not authenticated or unauthorized
          schema:
            type: string
        "403":
          description: Permission denied
          schema:
            type: string
        "404":
          description: No Order with specified ID
          schema:
            type: string
      summary: Retrieve an order
      tags:
      - order
  /api/get_orders:
    get:
      description: Retreives orders and their associated metadata belonging to the
        authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: JSON representation of an orders information (empty object
            if none)
          schema:
            items:
              $ref: '#/definitions/orderstable.OrderReturn'
            type: array
        "401":
          description: User not authenticated or unauthorized
          schema:
            type: string
        "403":
          description: Permission denied
          schema:
            type: string
        "404":
          description: No Order with specified ID
          schema:
            type: string
      summary: Retrieve an user's orders
      tags:
      - order
  /api/get_product:
    get:
      description: Retrieves a list of all external storefronts linked by the currently
        authenticated user. Credentials are *never* included. Requires authentication.
      responses:
        "200":
          description: List of linked storefronts (empty array if none)
          schema:
            items:
              $ref: '#/definitions/storefronttable.StorefrontLinkReturn'
            type: array
        "401":
          description: Unauthorized - User session invalid or expired
          schema:
            type: string
        "500":
          description: Internal Server Error - Database query failed
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get linked storefronts
      tags:
      - Storefronts
  /api/login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Authenticates a user using email and password. Creates a session
        cookie upon successful authentication and redirects to the homepage.
      parameters:
      - description: User's Email Address
        in: formData
        name: email
        required: true
        type: string
      - description: User's Password
        in: formData
        name: password
        required: true
        type: string
      responses:
        "303":
          description: Redirects to / on successful login
          schema:
            type: string
        "400":
          description: 'Bad Request: Email and password are required'
          schema:
            type: string
        "401":
          description: 'Unauthorized: Invalid credentials'
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: User Login (Email/Password)
      tags:
      - Authentication
  /api/products:
    delete:
      description: Deletes a specific product owned by the authenticated user, identified
        by its ID. Also deletes the associated image file and record.
      parameters:
      - description: ID of the product to delete
        format: uint64
        in: query
        name: id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: Product deleted successfully
          schema:
            type: string
        "400":
          description: 'Bad Request: Invalid Product ID'
          schema:
            type: string
        "401":
          description: 'Unauthorized: User not authenticated'
          schema:
            type: string
        "403":
          description: 'Forbidden: User does not own this product'
          schema:
            type: string
        "404":
          description: 'Not Found: Product not found'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Database or file system error during
            deletion'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete a product
      tags:
      - Products
    get:
      description: Retrieves a list of all products owned by the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of products
          schema:
            items:
              $ref: '#/definitions/prodtable.ProductReturn'
            type: array
        "401":
          description: 'Unauthorized: User not authenticated'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Database error'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all products for the user
      tags:
      - Products
    post:
      consumes:
      - multipart/form-data
      description: Creates a new product listing associated with the authenticated
        user. Requires product details and an image upload.
      parameters:
      - description: Name of the product
        in: formData
        name: productName
        required: true
        type: string
      - description: Description of the product
        in: formData
        name: description
        required: true
        type: string
      - description: Price of the product (e.g., 19.99)
        format: float
        in: formData
        name: price
        required: true
        type: number
      - description: Available stock count
        format: int32
        in: formData
        name: count
        required: true
        type: integer
      - description: Comma-separated tags for the product
        in: formData
        name: tags
        type: string
      - description: Product image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - text/plain
      responses:
        "201":
          description: Product added successfully
          schema:
            type: string
        "400":
          description: 'Bad Request: Missing required fields, invalid data format,
            or image error'
          schema:
            type: string
        "401":
          description: 'Unauthorized: User not authenticated'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Database or file system error'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Add a new product
      tags:
      - Products
    put:
      consumes:
      - multipart/form-data
      description: Updates details (name, description, price, count, tags) and/or
        the image for a specific product owned by the authenticated user. Fields not
        provided are left unchanged.
      parameters:
      - description: ID of the product to update
        format: uint64
        in: query
        name: id
        required: true
        type: integer
      - description: New name for the product
        in: formData
        name: productName
        type: string
      - description: New description for the product
        in: formData
        name: description
        type: string
      - description: New price for the product (e.g., 29.99)
        format: float
        in: formData
        name: price
        type: number
      - description: New available stock count
        format: int32
        in: formData
        name: count
        type: integer
      - description: New comma-separated tags (replaces old tags)
        in: formData
        name: tags
        type: string
      - description: New product image file (replaces old image)
        in: formData
        name: image
        type: file
      produces:
      - text/plain
      responses:
        "200":
          description: Product updated successfully
          schema:
            type: string
        "400":
          description: 'Bad Request: Invalid Product ID or data format'
          schema:
            type: string
        "401":
          description: 'Unauthorized: User not authenticated'
          schema:
            type: string
        "403":
          description: 'Forbidden: User does not own this product'
          schema:
            type: string
        "404":
          description: 'Not Found: Product not found'
          schema:
            type: string
        "409":
          description: 'Conflict: Product name already exists for this user" // If
            name is updated'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Database or file system error during
            update'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update a product
      tags:
      - Products
  /api/products/details:
    get:
      description: Retrieves details for a specific product owned by the authenticated
        user, identified by its ID.
      parameters:
      - description: ID of the product to retrieve
        format: uint64
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved product details
          schema:
            $ref: '#/definitions/prodtable.ProductReturn'
        "400":
          description: 'Bad Request: Invalid Product ID'
          schema:
            type: string
        "401":
          description: 'Unauthorized: User not authenticated'
          schema:
            type: string
        "403":
          description: 'Forbidden: User does not own this product'
          schema:
            type: string
        "404":
          description: 'Not Found: Product not found'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Database error'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get a specific product
      tags:
      - Products
  /api/products/image:
    get:
      description: Retrieves and serves the image file associated with a product,
        identified by its filename. Requires the user to be authenticated and own
        the product/image.
      parameters:
      - description: Filename of the image to retrieve (e.g., 'uuid.jpg')
        in: query
        name: image
        required: true
        type: string
      produces:
      - image/*
      responses:
        "200":
          description: Product image file
          schema:
            type: file
        "400":
          description: 'Bad Request: Missing or invalid image filename'
          schema:
            type: string
        "401":
          description: 'Unauthorized: User not authenticated'
          schema:
            type: string
        "403":
          description: 'Forbidden: User does not own this image'
          schema:
            type: string
        "404":
          description: 'Not Found: Image metadata or file not found'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Database or file system error'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get a product image
      tags:
      - Products
  /api/register:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Registers a new user account using email and password for local
        authentication.
      parameters:
      - description: User's Email Address
        example: '"user@example.com"'
        in: formData
        name: email
        required: true
        type: string
      - description: User's Password (min length recommended)
        example: '"password123"'
        in: formData
        name: password
        required: true
        type: string
      - description: User's Full Name
        example: '"John Doe"'
        in: formData
        name: name
        required: true
        type: string
      - description: User's Business Name (Optional)
        example: '"JD Enterprises"'
        in: formData
        name: businessName
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: User registered successfully
          schema:
            type: string
        "400":
          description: 'Bad Request: Missing required fields (email, password, name),
            or invalid email format'
          schema:
            type: string
        "409":
          description: 'Conflict: Email address is already registered'
          schema:
            type: string
        "500":
          description: 'Internal Server Error: Failed to hash password or save user
            to database'
          schema:
            type: string
      summary: Register a new local user
      tags:
      - Authentication
  /api/update_storefront:
    put:
      consumes:
      - application/json
      description: Updates the name, store ID, or store URL of an existing storefront
        link belonging to the authenticated user. Store type and credentials cannot
        be updated via this endpoint.
      parameters:
      - description: ID of the Storefront Link to update
        example: 123
        format: uint
        in: query
        name: id
        required: true
        type: integer
      - description: Fields to update (storeName, storeId, storeUrl)
        in: body
        name: storefrontUpdate
        required: true
        schema:
          $ref: '#/definitions/storefronttable.StorefrontLinkUpdatePayload'
      responses:
        "200":
          description: Successfully updated storefront link details
          schema:
            $ref: '#/definitions/storefronttable.StorefrontLinkReturn'
        "400":
          description: Bad Request - Invalid input, missing ID, or JSON parsing error
          schema:
            type: string
        "401":
          description: Unauthorized - User session invalid or expired
          schema:
            type: string
        "403":
          description: Forbidden - User does not own this storefront link
          schema:
            type: string
        "404":
          description: Not Found - Storefront link with the specified ID not found
          schema:
            type: string
        "409":
          description: Conflict - Update would violate a unique constraint (e.g.,
            duplicate name)
          schema:
            type: string
        "500":
          description: Internal Server Error - Database update failed
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update a storefront link
      tags:
      - Storefronts
  /auth/google:
    get:
      description: Redirects the user to Google for authentication as part of the
        OAuth2 flow.
      responses:
        "307":
          description: Redirects to Google's authentication endpoint
          schema:
            type: string
        "500":
          description: Internal Server Error (if Goth setup fails)
          schema:
            type: string
      summary: Initiate Google Login
      tags:
      - Authentication (OAuth)
  /auth/google/callback:
    get:
      description: Handles the callback from Google after authentication. Creates
        a user session upon successful authentication and redirects to the homepage.
      responses:
        "307":
          description: Redirects to / on successful login
          schema:
            type: string
        "400":
          description: Bad Request (e.g., state mismatch)" // Goth might handle this
          schema:
            type: string
        "500":
          description: Internal Server Error (session, database, or Goth issue)
          schema:
            type: string
      summary: Google Login Callback
      tags:
      - Authentication (OAuth)
  /logout:
    get:
      description: Logs out the current user by clearing the session cookie and redirects
        to the homepage.
      responses:
        "307":
          description: Redirects to / after logout
          schema:
            type: string
        "500":
          description: Internal Server Error (if saving cleared session fails)
          schema:
            type: string
      summary: User Logout
      tags:
      - Authentication (OAuth)
      - Authentication
swagger: "2.0"
