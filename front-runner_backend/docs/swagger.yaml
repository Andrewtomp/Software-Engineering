basePath: /
host: localhost:8080
info:
  contact:
    email: jonathan.bravo@ufl.edu
    name: API Support
  description: API documentation for the Front Runner application.
  license:
    name: MIT
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Front Runner API
  version: "1.0"
paths:
  /api:
    get:
      consumes:
      - application/json
      description: Sets up all API endpoints and serves the frontend
      parameters:
      - description: Mux router instance
        in: path
        name: router
        required: true
        type: object
      - description: Enable request logging
        in: query
        name: logging
        type: boolean
      produces:
      - application/json
      - text/html
      responses:
        "200":
          description: Routes successfully registered
          schema:
            type: string
      summary: Configure application routes
      tags:
      - setup
  /api/add_product:
    post:
      consumes:
      - multipart/form-data
      description: Creates a new product with details including name, description,
        price, count, tags, and an associated image.
      parameters:
      - description: Product name
        in: formData
        name: productName
        required: true
        type: string
      - description: Product description
        in: formData
        name: description
        required: true
        type: string
      - description: Product price
        in: formData
        name: price
        required: true
        type: number
      - description: Product stock count
        in: formData
        name: count
        required: true
        type: integer
      - description: Product tags
        in: formData
        name: tags
        type: string
      - description: Product image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - text/plain
      responses:
        "201":
          description: Product added successfully
          schema:
            type: string
        "400":
          description: Error parsing form or uploading image
          schema:
            type: string
        "401":
          description: User not authenticated
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Add a new product
      tags:
      - product
  /api/data/image/{filename}:
    get:
      description: Fetches an image if it exists and they are authorized.
      parameters:
      - description: Filepath of image
        in: path
        name: filename
        required: true
        type: string
      produces:
      - image/*
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: User is not logged in
          schema:
            type: string
        "403":
          description: Permission denied
          schema:
            type: string
        "404":
          description: Requested image does not exist
          schema:
            type: string
        "500":
          description: Unable to retrieve User ID
          schema:
            type: string
      summary: Retrive an image
      tags:
      - images
  /api/data/upload:
    post:
      consumes:
      - multipart/form-data
      description: Uploads an image if the user is authorized.
      parameters:
      - description: Filepath of image
        in: formData
        name: filename
        required: true
        type: file
      responses:
        "200":
          description: Filename of uploaded image
          schema:
            type: string
        "401":
          description: User is not logged in
          schema:
            type: string
        "403":
          description: Permission denied
          schema:
            type: string
        "404":
          description: Requested image does not exist
          schema:
            type: string
        "415":
          description: Invalid file type
          schema:
            type: string
        "500":
          description: File already exists
          schema:
            type: string
      summary: Upload an image
      tags:
      - images
  /api/login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Authenticates a user and creates a session.
      parameters:
      - description: User email
        in: formData
        name: email
        required: true
        type: string
      - description: User password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Logged in successfully.
          schema:
            type: string
        "400":
          description: Email and password are required
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
      summary: User login
      tags:
      - authentication
      - login
  /api/logout:
    post:
      description: Logs out the current user by clearing the session.
      produces:
      - text/plain
      responses:
        "200":
          description: Logged out successfully
          schema:
            type: string
      summary: User logout
      tags:
      - authentication
      - logout
  /api/register:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Registers a new user using email, password, and an optional business
        name.
      parameters:
      - description: User email
        in: formData
        name: email
        required: true
        type: string
      - description: User password
        in: formData
        name: password
        required: true
        type: string
      - description: Business name
        in: formData
        name: business_name
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: User registered successfully
          schema:
            type: string
        "400":
          description: Email and password are required or invalid email format
          schema:
            type: string
        "409":
          description: Email already in use or database error
          schema:
            type: string
      summary: Register a new user
      tags:
      - authentication
      - user
      - dbtable
  /api/update_product:
    put:
      consumes:
      - application/x-www-form-urlencoded
      description: Updates the details of an existing product (description, price,
        stock count) that belongs to the authenticated user.
      parameters:
      - description: Product ID
        in: query
        name: id
        required: true
        type: string
      - description: New product description
        in: formData
        name: product_description
        type: string
      - description: New product price
        in: formData
        name: item_price
        type: number
      - description: New product stock count
        in: formData
        name: stock_amount
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: Product updated successfully
          schema:
            type: string
        "401":
          description: User not authenticated or unauthorized
          schema:
            type: string
        "404":
          description: Product not found
          schema:
            type: string
      summary: Update a product
      tags:
      - product
  /api/validemail:
    get:
      description: Checks if the provided email address is in a valid format. Returns
        true if valid, false otherwise.
      parameters:
      - description: Email address to validate
        in: query
        name: email
        required: true
        type: string
      responses:
        "200":
          description: true if email is valid, false otherwise
          schema:
            type: boolean
      summary: Validate email address
      tags:
      - utility
      - email
      - validate
swagger: "2.0"
