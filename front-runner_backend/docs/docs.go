// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "jonathan.bravo@ufl.edu"
        },
        "license": {
            "name": "MIT",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/add_product": {
            "post": {
                "description": "Creates a new product with details including name, description, price, count, tags, and an associated image.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Add a new product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product name",
                        "name": "productName",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product description",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Product price",
                        "name": "price",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Product stock count",
                        "name": "count",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product tags",
                        "name": "tags",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Product image file",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product added successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error parsing form or uploading image",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/data/image/{filename}": {
            "get": {
                "description": "Fetches an image if it exists and they are authorized.",
                "produces": [
                    "image/*"
                ],
                "tags": [
                    "images"
                ],
                "summary": "Retrive an image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filepath of image",
                        "name": "filename",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Requested image does not exist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Unable to retrieve User ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/data/upload": {
            "post": {
                "description": "Uploads an image if the user is authorized.",
                "consumes": [
                    "multipart/form-data"
                ],
                "tags": [
                    "images"
                ],
                "summary": "Upload an image",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Filepath of image",
                        "name": "filename",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Filename of uploaded image",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User is not logged in",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Requested image does not exist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "415": {
                        "description": "Invalid file type",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "File already exists",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/delete_product": {
            "delete": {
                "description": "Deletes an existing product and its associated image if the product belongs to the authenticated user.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Delete a product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/get_product": {
            "get": {
                "description": "Retreives an existing product and its associated metadata if the product belongs to the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Retrieve a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JSON representation of a product's information",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "No Product with specified ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/get_product_image": {
            "get": {
                "description": "Retreives an existing product image if it exists and belongs to the authenticated user.",
                "produces": [
                    "image/*"
                ],
                "tags": [
                    "product",
                    "images"
                ],
                "summary": "Retrieve a product image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filepath of image",
                        "name": "image",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image's data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Requested image does not exist",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/get_products": {
            "get": {
                "description": "Retreives existing products and their associated metadata for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Retrieves all product information for authenticated user.",
                "responses": {
                    "200": {
                        "description": "JSON representation of a user's product information",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "description": "Authenticates a user and creates a session.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logged in successfully.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Email and password are required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/logout": {
            "post": {
                "description": "Logs out the current user by clearing the session.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/register": {
            "post": {
                "description": "Registers a new user using email, password, and an optional business name.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Business name",
                        "name": "business_name",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Email and password are required or invalid email format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Email already in use or database error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/update_product": {
            "put": {
                "description": "Updates the details of an existing product (description, price, stock count) that belongs to the authenticated user.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Update a product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New product description",
                        "name": "product_description",
                        "in": "formData"
                    },
                    {
                        "type": "number",
                        "description": "New product price",
                        "name": "item_price",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "New product stock count",
                        "name": "stock_amount",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "User not authenticated or unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Front Runner API",
	Description:      "API documentation for the Front Runner application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
