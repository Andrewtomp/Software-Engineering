// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "jonathan.bravo@ufl.edu"
        },
        "license": {
            "name": "MIT",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/add_storefront": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth // Assuming ApiKeyAuth is defined for session/token auth": []
                    }
                ],
                "description": "Links a new external storefront (e.g., Amazon, Pinterest) to the user's account, storing credentials securely. Requires authentication.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Storefronts"
                ],
                "summary": "Link a new storefront",
                "parameters": [
                    {
                        "description": "Storefront Link Details (including credentials like apiKey, apiSecret)",
                        "name": "storefrontLink",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storefronttable.StorefrontLinkAddPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully linked storefront (credentials omitted)",
                        "schema": {
                            "$ref": "#/definitions/storefronttable.StorefrontLinkReturn"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input, missing fields, or JSON parsing error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User session invalid or expired",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict - A link with this name/type already exists for the user",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - E.g., failed to encrypt, database error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/delete_storefront": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Removes the link to an external storefront specified by its unique ID. User must own the link. Requires authentication.",
                "tags": [
                    "Storefronts"
                ],
                "summary": "Unlink a storefront",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "uint",
                        "example": 123,
                        "description": "ID of the Storefront Link to delete",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Storefront unlinked successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "204": {
                        "description": "Storefront unlinked successfully (No Content)\" // Added 204 as an alternative success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid or missing 'id' query parameter",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User session invalid or expired",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not own this storefront link",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - Storefront link with the specified ID not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Database deletion failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/get_storefronts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of all external storefronts linked by the currently authenticated user. Credentials are *never* included. Requires authentication.",
                "tags": [
                    "Storefronts"
                ],
                "summary": "Get linked storefronts",
                "responses": {
                    "200": {
                        "description": "List of linked storefronts (empty array if none)",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/storefronttable.StorefrontLinkReturn"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User session invalid or expired",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Database query failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "description": "Authenticates a user using email and password. Creates a session cookie upon successful authentication and redirects to the homepage.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Login (Email/Password)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User's Email Address",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User's Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirects to / on successful login",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Email and password are required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid credentials",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/products": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of all products owned by the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get all products for the user",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of products",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/prodtable.ProductReturn"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Database error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates details (name, description, price, count, tags) and/or the image for a specific product owned by the authenticated user. Fields not provided are left unchanged.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Update a product",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "uint64",
                        "description": "ID of the product to update",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New name for the product",
                        "name": "productName",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "New description for the product",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "number",
                        "format": "float",
                        "description": "New price for the product (e.g., 29.99)",
                        "name": "price",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "New available stock count",
                        "name": "count",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "New comma-separated tags (replaces old tags)",
                        "name": "tags",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "New product image file (replaces old image)",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid Product ID or data format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden: User does not own this product",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found: Product not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict: Product name already exists for this user\" // If name is updated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Database or file system error during update",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new product listing associated with the authenticated user. Requires product details and an image upload.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Add a new product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the product",
                        "name": "productName",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Description of the product",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "number",
                        "format": "float",
                        "description": "Price of the product (e.g., 19.99)",
                        "name": "price",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Available stock count",
                        "name": "count",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated tags for the product",
                        "name": "tags",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Product image file",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product added successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Missing required fields, invalid data format, or image error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Database or file system error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a specific product owned by the authenticated user, identified by its ID. Also deletes the associated image file and record.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Delete a product",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "uint64",
                        "description": "ID of the product to delete",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid Product ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden: User does not own this product",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found: Product not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Database or file system error during deletion",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/products/details": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves details for a specific product owned by the authenticated user, identified by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get a specific product",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "uint64",
                        "description": "ID of the product to retrieve",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved product details",
                        "schema": {
                            "$ref": "#/definitions/prodtable.ProductReturn"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid Product ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden: User does not own this product",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found: Product not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Database error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/products/image": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves and serves the image file associated with a product, identified by its filename. Requires the user to be authenticated and own the product/image.",
                "produces": [
                    "image/*"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get a product image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filename of the image to retrieve (e.g., 'uuid.jpg')",
                        "name": "image",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product image file",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Missing or invalid image filename",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: User not authenticated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden: User does not own this image",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found: Image metadata or file not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Database or file system error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/register": {
            "post": {
                "description": "Registers a new user account using email and password for local authentication.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new local user",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"user@example.com\"",
                        "description": "User's Email Address",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"password123\"",
                        "description": "User's Password (min length recommended)",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"John Doe\"",
                        "description": "User's Full Name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"JD Enterprises\"",
                        "description": "User's Business Name (Optional)",
                        "name": "businessName",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Missing required fields (email, password, name), or invalid email format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict: Email address is already registered",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to hash password or save user to database",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/update_storefront": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the name, store ID, or store URL of an existing storefront link belonging to the authenticated user. Store type and credentials cannot be updated via this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Storefronts"
                ],
                "summary": "Update a storefront link",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "uint",
                        "example": 123,
                        "description": "ID of the Storefront Link to update",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Fields to update (storeName, storeId, storeUrl)",
                        "name": "storefrontUpdate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/storefronttable.StorefrontLinkUpdatePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated storefront link details",
                        "schema": {
                            "$ref": "#/definitions/storefronttable.StorefrontLinkReturn"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input, missing ID, or JSON parsing error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User session invalid or expired",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User does not own this storefront link",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - Storefront link with the specified ID not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict - Update would violate a unique constraint (e.g., duplicate name)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Database update failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/google": {
            "get": {
                "description": "Redirects the user to Google for authentication as part of the OAuth2 flow.",
                "tags": [
                    "Authentication (OAuth)"
                ],
                "summary": "Initiate Google Login",
                "responses": {
                    "307": {
                        "description": "Redirects to Google's authentication endpoint",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (if Goth setup fails)",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/google/callback": {
            "get": {
                "description": "Handles the callback from Google after authentication. Creates a user session upon successful authentication and redirects to the homepage.",
                "tags": [
                    "Authentication (OAuth)"
                ],
                "summary": "Google Login Callback",
                "responses": {
                    "307": {
                        "description": "Redirects to / on successful login",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request (e.g., state mismatch)\" // Goth might handle this",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (session, database, or Goth issue)",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logout": {
            "get": {
                "description": "Logs out the current user by clearing the session cookie and redirects to the homepage.",
                "tags": [
                    "Authentication (OAuth)",
                    "Authentication"
                ],
                "summary": "User Logout",
                "responses": {
                    "307": {
                        "description": "Redirects to / after logout",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error (if saving cleared session fails)",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "prodtable.ProductReturn": {
            "type": "object",
            "properties": {
                "image": {
                    "description": "Consider renaming to imageURL or similar",
                    "type": "string"
                },
                "prodCount": {
                    "type": "integer"
                },
                "prodDesc": {
                    "type": "string"
                },
                "prodID": {
                    "type": "integer"
                },
                "prodName": {
                    "type": "string"
                },
                "prodPrice": {
                    "type": "number"
                },
                "prodTags": {
                    "type": "string"
                }
            }
        },
        "storefronttable.StorefrontLinkAddPayload": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "description": "Example credential field",
                    "type": "string"
                },
                "apiSecret": {
                    "description": "Example credential field",
                    "type": "string"
                },
                "storeId": {
                    "description": "Platform-specific ID",
                    "type": "string"
                },
                "storeName": {
                    "description": "User-defined nickname",
                    "type": "string"
                },
                "storeType": {
                    "type": "string"
                },
                "storeUrl": {
                    "description": "Storefront URL",
                    "type": "string"
                }
            }
        },
        "storefronttable.StorefrontLinkReturn": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "storeId": {
                    "description": "Match frontend JSON keys",
                    "type": "string"
                },
                "storeName": {
                    "type": "string"
                },
                "storeType": {
                    "type": "string"
                },
                "storeUrl": {
                    "type": "string"
                }
            }
        },
        "storefronttable.StorefrontLinkUpdatePayload": {
            "type": "object",
            "properties": {
                "storeId": {
                    "description": "Platform-specific ID",
                    "type": "string"
                },
                "storeName": {
                    "description": "User-defined nickname",
                    "type": "string"
                },
                "storeUrl": {
                    "description": "Storefront URL",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080 // Update this if using ngrok static domain for Swagger docs",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Front Runner API",
	Description:      "API documentation for the Front Runner application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
